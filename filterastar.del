define playervar g=0;
define playervar h=0;
define playervar f=0;
define playervar parent=0;
define playervar scandistance=2;
define playervar scandistancepyth=Pythag(scandistance,scandistance);
define playervar radius=0.2;
define playervar current=EmptyArray();
define playervar open=0;
define playervar test = EmptyArray();
define playervar closed=0;
define playervar facingdir=0;
define playervar startfinding=false;
define playervar endnode = 0;
define playervar min = -1;
define playervar startime = 0;
define playervar fintime = 0;
define playervar pathstart = false;
define playervar pathendnode = 0;
define playervar pathendnodeparent = 0;
define playervar pathlist = 0;
define playervar startingnode = 0;
define playervar reversepathfinished = false;
define playervar reversepathlist = EmptyArray();
define playervar chasepos = 0;
define playervar dva;
define globalvar dividednode = EmptyArray();
define playervar divdedcount = 0;
define globalvar nodes =
  [
Vector(11.42,8.01,-50.67),
Vector(1.04,7.98,-53.86),
Vector(-2.88,7.00,-54.72),
Vector(-12.29,7.00,-44.74),
Vector(-6.21,7.24,-38.75),
Vector(6.55,6.89,-35.82),
Vector(13.40,6.95,-35.52),
Vector(-0.51,7.38,-26.94),
Vector(6.12,7.41,-20.81),
Vector(-3.35,7.28,-23.95),
Vector(-8.62,7.04,-24.96),
Vector(-1.09,7.33,-32.73),
Vector(9.82,7.28,-25.64),
Vector(11.85,6.19,-19.87),
Vector(17.88,6.02,-13.19),
Vector(23.16,6.02,-14.84),
Vector(1.30,6.76,-13.92),
Vector(-2.72,7.05,-17.94),
Vector(-15.02,6.36,-11.79),
Vector(-3.16,5.79,-4.55),
Vector(10.29,4.15,-4.18),
Vector(10.36,4.14,5.30),
Vector(2.09,5.30,6.73),
Vector(1.37,6.63,13.33),
Vector(-5.23,6.24,4.24),
Vector(-12.51,7.27,-4.85),
Vector(-12.52,7.27,3.73),
Vector(-15.18,7.00,-7.82),
Vector(-20.78,7.00,-6.09),
Vector(-25.45,8.37,-5.99),
Vector(-30.66,9.00,-5.97),
Vector(-31.05,9.00,-0.05),
Vector(-30.94,9.00,6.37),
Vector(-25.86,8.57,6.18),
Vector(-14.93,6.85,10.54),
Vector(-20.42,7.00,6.08),
Vector(18.02,4.00,-4.22),
Vector(17.97,4.00,4.29),
Vector(18.26,6.01,12.53),
Vector(17.99,6.01,17.13),
Vector(22.91,6.01,16.85),
Vector(23.05,8.71,8.85),
Vector(22.90,9.00,0.21),
Vector(23.01,9.00,-6.97),
Vector(18.09,9.00,-6.08),
Vector(17.83,9.00,-0.47),
Vector(17.98,9.00,5.85),
Vector(20.59,9.00,-3.43),
Vector(20.71,9.00,3.37),
Vector(17.91,11.81,12.33),
Vector(16.79,12.01,17.04),
Vector(14.00,11.81,19.49),
Vector(17.81,11.81,24.05),
Vector(17.97,9.45,29.94),
Vector(14.55,7.12,34.83),
Vector(11.39,11.81,17.16),
Vector(6.86,11.32,21.55),
Vector(1.90,11.63,25.34),
Vector(9.76,12.00,11.58),
Vector(4.30,12.00,11.84),
Vector(-5.47,12.00,11.93),
Vector(-5.98,12.00,0.69),
Vector(-5.96,12.00,-11.66),
Vector(0.84,12.00,-12.01),
Vector(9.37,12.00,-12.16),
Vector(-6.15,12.00,-4.20),
Vector(-6.16,12.00,4.03),
Vector(-15.05,12.00,10.39),
Vector(-15.76,11.93,14.39),
Vector(-14.51,10.00,19.35),
Vector(-8.77,7.05,24.99),
Vector(-7.72,6.86,17.09),
Vector(-3.36,7.29,23.96),
Vector(3.07,7.14,30.63),
Vector(6.70,7.01,19.89),
Vector(11.47,6.40,20.89),
Vector(9.12,7.09,28.85),
Vector(7.95,7.03,39.97),
Vector(10.86,8.04,49.85),
Vector(1.01,8.00,53.91),
Vector(-3.29,7.00,54.23),
Vector(-12.49,7.00,44.81),
Vector(-6.10,7.27,38.32),
Vector(-12.09,7.10,31.58),
Vector(1.53,7.10,36.02),
Vector(19.40,6.02,-17.44),
Vector(3.43,7.03,-31.29),
Vector(8.93,6.93,-31.17),
Vector(17.50,9.40,-29.86),
Vector(16.87,11.32,-24.38),
Vector(13.83,11.81,-19.42),
Vector(11.35,11.81,-17.08),
Vector(1.60,11.63,-25.65),
Vector(7.17,11.59,-21.12),
Vector(17.86,12.00,-14.07),
Vector(17.85,11.10,-10.92),
Vector(16.68,11.81,-23.16),
Vector(-15.00,12.00,-11.86),
Vector(-14.87,12.00,-7.90),
Vector(-10.81,12.00,-7.92),
Vector(-10.47,12.00,0.22),
Vector(-10.93,12.00,7.99),
Vector(-18.78,12.00,7.59),
Vector(-19.38,12.00,-0.06),
Vector(-23.72,10.78,-0.09),
Vector(-19.16,12.00,-7.79),
Vector(-15.35,10.89,-16.47),
Vector(-13.87,10.00,-19.79),
Vector(-11.37,8.30,-22.32),
Vector(-10.84,7.20,-31.98),
Vector(-0.70,7.17,-38.57),
Vector(-7.66,6.99,-20.47),
Vector(-10.19,7.48,-23.44),
Vector(-10.75,7.87,-22.90),
Vector(-11.49,8.39,-22.18),
Vector(-12.24,8.90,-21.46),
Vector(-12.92,9.38,-20.81),
Vector(-13.66,9.89,-20.09),
Vector(-14.50,10.00,-19.22),
Vector(-15.14,10.00,-18.26),
Vector(-15.28,10.53,-17.20),
Vector(-15.34,11.09,-16.07),
Vector(-15.35,11.56,-15.13),
Vector(-15.34,12.00,-14.17),
Vector(-15.24,12.00,-12.92),
Vector(12.76,6.95,-34.82),
Vector(14.02,7.13,-34.00),
Vector(14.96,7.50,-33.38),
Vector(15.80,7.97,-32.74),
Vector(16.43,8.43,-32.01),
Vector(16.97,8.93,-31.00),
Vector(17.24,9.35,-29.86),
Vector(17.27,9.73,-28.87),
Vector(17.14,10.09,-27.78),
Vector(17.02,10.43,-26.68),
Vector(16.95,10.95,-25.33),
Vector(16.82,11.81,-24.16),
Vector(16.50,11.81,-22.75),
Vector(17.97,9.37,-7.46),
Vector(17.94,9.80,-8.32),
Vector(17.93,10.28,-9.27),
Vector(17.92,10.75,-10.22),
Vector(17.90,11.23,-11.17),
Vector(17.89,11.74,-12.20),
Vector(18.16,9.11,6.94),
Vector(18.14,9.63,7.98),
Vector(18.13,10.19,9.10),
Vector(18.11,10.71,10.13),
Vector(18.08,11.23,11.17),
Vector(18.03,11.92,12.55),
Vector(17.82,11.81,23.21),
Vector(18.00,11.30,24.54),
Vector(18.11,10.89,25.54),
Vector(18.24,10.54,26.53),
Vector(18.14,10.23,27.54),
Vector(17.82,9.88,28.59),
Vector(17.49,9.47,29.63),
Vector(17.13,9.06,30.75),
Vector(16.48,8.49,31.90),
Vector(15.55,7.87,32.80),
Vector(14.52,7.35,33.49),
Vector(23.23,6.20,13.88),
Vector(23.22,6.68,12.93),
Vector(23.21,7.11,12.07),
Vector(23.19,7.58,11.12),
Vector(23.16,8.15,10.00),
Vector(23.14,8.62,9.05),
Vector(23.11,9.00,7.99),
Vector(22.86,8.90,-8.48),
Vector(22.87,8.47,-9.34),
Vector(22.88,8.04,-10.21),
Vector(22.89,7.57,-11.15),
Vector(22.90,7.09,-12.10),
Vector(22.92,6.62,-13.05),
Vector(22.93,6.02,-14.26),
Vector(18.16,6.00,-11.79),
Vector(18.12,5.60,-10.91),
Vector(18.08,5.12,-9.96),
Vector(18.04,4.61,-8.93),
Vector(18.00,4.09,-7.89),
Vector(18.15,4.13,7.96),
Vector(18.12,4.60,8.91),
Vector(18.09,5.03,9.78),
Vector(18.05,5.63,10.98),
Vector(18.01,6.01,12.14),
Vector(-9.24,7.04,24.40),
Vector(-9.99,7.32,23.71),
Vector(-10.62,7.75,23.11),
Vector(-11.24,8.18,22.51),
Vector(-11.81,8.57,21.98),
Vector(-12.50,9.05,21.32),
Vector(-13.13,9.48,20.72),
Vector(-13.81,9.95,20.07),
Vector(-14.57,10.00,19.34),
Vector(-15.22,10.00,18.38),
Vector(-15.45,10.50,17.24),
Vector(-15.46,10.98,16.29),
Vector(-15.47,11.45,15.35),
Vector(-15.48,11.93,14.40),
Vector(-15.45,12.00,13.27),
Vector(-23.60,7.44,-6.15),
Vector(-24.47,7.88,-6.12),
Vector(-25.33,8.31,-6.08),
Vector(-26.45,8.87,-6.03),
Vector(-26.48,9.40,-0.11),
Vector(-25.53,9.88,-0.07),
Vector(-24.58,10.35,-0.04),
Vector(-23.63,10.83,-0.03),
Vector(-22.68,11.30,-0.03),
Vector(-21.56,11.86,-0.03),
Vector(-22.81,7.05,5.83),
Vector(-23.76,7.52,5.89),
Vector(-24.62,7.95,5.92),
Vector(-25.57,8.43,5.95),
Vector(-26.69,8.99,5.99)

  ];



rule: "Init"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Interact))
{
DestroyAllHudText();
Wait(0.2);
CreateDummyBot(Hero.Dva,Team.All,-1,NearestWalkablePosition(Add(EyePosition(EventPlayer()),Multiply(FacingDirectionOf(EventPlayer()),30))),Vector(0,0,0));
dva = LastCreatedEntity();
Wait(1);
endnode=FirstOf(SortedArray(nodes,DistanceBetween(PositionOf(),ArrayElement())));
startingnode = FirstOf(SortedArray(nodes,DistanceBetween(PositionOf(dva),ArrayElement())));
open= Append(startingnode);
facingdir=Vector(XOf(FacingDirectionOf(EventPlayer())),0,ZOf(FacingDirectionOf(EventPlayer())));

CreateHudText(EventPlayer(),ServerLoad());
CreateHudText(EventPlayer(),ServerLoadPeak());
//CreateHudText(EventPlayer(),CountOf(open));
nodes = SortedArray(nodes,DistanceBetween(Vector(11.42,8.01,-50.67),ArrayElement()));
dividednode[0]=ArraySlice(nodes,0,30);
dividednode[1]=ArraySlice(nodes,21,30);
dividednode[2]=ArraySlice(nodes,42,30);
dividednode[3]=ArraySlice(nodes,63,30);
dividednode[4]=ArraySlice(nodes,84,30);
dividednode[5]=ArraySlice(nodes,105,30);
dividednode[6]=ArraySlice(nodes,126,30);
dividednode[7]=ArraySlice(nodes,147,30);
dividednode[8]=ArraySlice(nodes,168,30);
dividednode[9]=ArraySlice(nodes,189,30);
CreateHudText(EventPlayer(),divdedcount);
current = FirstOf(SortedArray(nodes,DistanceBetween(PositionOf(dva),ArrayElement())));
Wait(0.2);
startime = TotalTimeElapsed();
//CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow, Vector(XOf(current),YOf(EyePosition(endnode)),ZOf(current)), radius, EffectRev.VisibleToPositionAndRadius);
startfinding=true;

}

rule: "Start PathFinding"
Event.OngoingPlayer
if(startfinding)
{
  current=FirstOf(SortedArray(open,current[1]+DistanceBetween(current[0],ArrayElement()) + DistanceBetween(endnode,ArrayElement())));

  CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow, current[0], radius, EffectRev.None);


     if(current[0] == endnode | CountOf(open) ==0)
    {
    fintime = TotalTimeElapsed();
   // DestroyAllEffects();
    Wait(0.2);
    CreateHudText(EventPlayer(),fintime-startime);
   // CreateEffect(AllPlayers(), Effect.Sphere, Color.Yellow, current, radius, EffectRev.None);
    SmallMessage(EventPlayer(),<"Finished">);
    pathendnode = current[4];
    //CreateBeamEffect(EventPlayer(),BeamType.GrappleBeam,current[0],Vector(XOf(current[4]),YOf(EyePosition(EventPlayer())),ZOf(current[4])),Color.Red,EffectRev.None);
    CreateBeamEffect(EventPlayer(),BeamType.GrappleBeam,current[0],current[4],Color.Red,EffectRev.None);
    reversepathlist = Append(reversepathlist,current[0]);
    pathstart = true;
    chasepos = PositionOf(endnode);
    Abort();
    }
  define appendtoclosed = 0;

  appendtoclosed[0][0]=current[0];
  appendtoclosed[0][1]=current[4];
  closed = Append(closed,appendtoclosed);
  open=RemoveFromArray(open,current);
  
  if(ArrayContains(dividednode[0],current))
  divdedcount =0;
  else if(ArrayContains(dividednode[1],current))
  divdedcount =1;
   else if(ArrayContains(dividednode[2],current))
  divdedcount =2;
   else if(ArrayContains(dividednode[3],current))
  divdedcount =3;
   else if(ArrayContains(dividednode[4],current))
  divdedcount =4;
   else if(ArrayContains(dividednode[5],current))
  divdedcount =5;
   else if(ArrayContains(dividednode[6],current))
  divdedcount =6;
   else if(ArrayContains(dividednode[7],current))
  divdedcount =7;
   else if(ArrayContains(dividednode[8],current))
  divdedcount =8;
   else if(ArrayContains(dividednode[9],current))
  divdedcount =9;

  define successor = dividednode[divdedcount];
        // successor = ArraySlice(SortedArray(dividednode[divdedcount],DistanceBetween(current[0],ArrayElement())),0,21);
          successor = FilteredArray(successor, ArrayContains(closed,ArrayContains(open,ArrayElement())==false&ArrayElement())==false&IsInLineOfSight(Vector(XOf(current[0]),Add(YOf(current[0]),1.5),ZOf(current[0])),Vector(XOf(ArrayElement()),Add(YOf(ArrayElement()),1.5),ZOf(ArrayElement()))) & YOf(ArrayElement()) <= Add(YOf(current[0]),DistanceBetween(EyePosition(),PositionOf())));
          successor = ArraySlice(SortedArray(successor,current[1]+DistanceBetween(current[0],ArrayElement()) + DistanceBetween(endnode,ArrayElement())),0,2);

          
  foreach (define suc in successor)
  {
 
        define neighbor=0;
       // define newMovementCostToNeighbor = current[1] +DistanceBetween(current[0],suc);
        neighbor[0][0]=suc; 
        neighbor[0][1]= current[1]+DistanceBetween(current[0],suc);
       //neighbor[0][2] = DistanceBetween(endnode,suc);
       // neighbor[0][3] = current[1]+DistanceBetween(current[0],suc) + DistanceBetween(endnode,suc);
        //neighbor[0][3] = DistanceBetween(current[0],suc)+DistanceBetween(endnode,suc);
        //neighbor[0][3] = DistanceBetween(endnode,suc);
        neighbor[0][4] = current[0];
        
        open= Append(open,neighbor);
    
    
  }


 
 LoopIfConditionIsTrue();
 
}


rule: "Reset"
Event.OngoingPlayer
if(startfinding)
if (IsButtonHeld(EventPlayer(), Button.Crouch))
{
  DestroyAllHudText();
  DestroyAllEffects();
  DestroyAllDummyBots();
  reversepathfinished = false;
  radius=0.2;
  current=0;
  open=EmptyArray();
  closed=EmptyArray();
  facingdir=0;
  startfinding=false;
  pathstart = false;
  pathendnode=0;
  reversepathlist = EmptyArray();
  pathlist = EmptyArray();
  min=-1;
  StopThrottleInDirection(endnode);
  //define eyepos = EyePosition(EventPlayer());
  //CreateText("8==D",0,EventPlayer(),eyepos,1,EffectRev.VisibleToPositionAndRadius,true);
}

rule: "Retrace"
Event.OngoingPlayer
if(pathstart)
{

  define foundnode = FirstOf(FilteredArray(closed,ArrayElement()[0] == pathendnode));

    //CreateEffect(AllPlayers(), Effect.Sphere, Color.Red, Vector(XOf(pathendnode),YOf(EyePosition(EventPlayer())),ZOf(pathendnode)), radius, EffectRev.None);
  pathendnode = foundnode[1];
  reversepathlist = Append(reversepathlist,pathendnode);
  CreateBeamEffect(EventPlayer(),BeamType.GrappleBeam,Vector(XOf(foundnode[0]),Add(YOf(foundnode[0]),1),ZOf(foundnode[0])),Vector(XOf(foundnode[1]),Add(YOf(foundnode[1]),1),ZOf(foundnode[1])),Color.Red,EffectRev.None);
  
 if(pathendnode == startingnode )
  {
    reversepathfinished = true;
    SmallMessage(EventPlayer(),<"hello">);
    pathstart = false;
    Abort();
  }
  
  MinWait();
  LoopIfConditionIsTrue();
}


rule: "Start walking"
Event.OngoingPlayer
if(reversepathfinished)
{
  StartThrottleInDirection(dva,DirectionTowards(dva,Vector(XOf(LastOf(reversepathlist)),0,ZOf(LastOf(reversepathlist)))),1);
  // ForceThrottle(endnode,1,1,0,0,0,0);
   StartFacing(dva,DirectionTowards(dva,LastOf(reversepathlist)),1000);
  // ChaseVariable(chasepos,FirstOf(reversepathlist),10);
  // Teleport(endnode,chasepos);
 if(SpeedOf(dva)<3)
 PressButton(dva,Button.Jump);
  if(DistanceBetween(PositionOf(dva),LastOf(reversepathlist))<0.2)
  {

    reversepathlist=RemoveFromArrayAtIndex(reversepathlist,CountOf(reversepathlist)-1);
  
    SmallMessage(EventPlayer(),<"danger">);
    if(CountOf(reversepathlist) == 0)
    {
      reversepathfinished = false;
      StopForcingThrottle(dva);
      StopFacing(dva);
      StopThrottleInDirection(dva);
      //Abort();
    }
  }
  MinWait();
LoopIfConditionIsTrue();
 StopThrottleInDirection(dva);
}
