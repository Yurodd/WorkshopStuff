/*

Murder Mystery!

*/


// Team ID's
define globalvar allyTeamID;
define globalvar mafiaTeamID;
define globalvar vampireTeamID; // Special event

// Role ID's
define globalvar Hunter;
define globalvar Detective;
define globalvar Interrogator;
define globalvar Tracker;
define globalvar Doctor;
define globalvar Observer;
define globalvar Framer;
define globalvar Necromancer;
define globalvar Revealer;

define globalvar isInitialized;
define globalvar gameTime;
define globalvar gameIsOver;
define globalvar numberOfMafia;
define globalvar registeredPlayers;

// Special event data
define globalvar event;
define globalvar initalVampire;

define playervar team; // The team of a player.
define playervar role; // The role of the player.

define playervar killCount;

// Effects
	// Destroy on role switch
	define playervar roleHud;        // The hud that describes their role to the player.

	// Destroy on team switch
	define playervar objectiveHud;   // The player's objective.
	define playervar orbIdentifier;  // The orb identifier.
	define playervar teamHud;        // The player name icon on the top right.

	// Destroy on revive
	define playervar deathSphere;    // The death sphere.
	define playervar deathText;      // The death text.

// Player ability
define playervar canInteract;
define playervar interactTime;
define playervar abilityCharges;
define playervar targetState;
define playervar interactTarget;
define playervar interactHUD;
define playervar interactEffect;
define playervar abilityProgress;

define playervar steps;
define playervar killer;
define playervar killersStep;

define playervar hunterEffectsRegistered;
define playervar hunterStep;
define playervar hunterVictim;
define playervar hunterLocation;
define playervar hunterSpeedBoost;

define playervar hunterEffect;
define playervar hunterIcon;
define playervar hunterHud;

rule: "Debug"
Event.OngoingPlayer
Player.Slot0
{
	team = allyTeamID;
	role = Hunter;
}

rule: "Constants"
{
	allyTeamID = 0;
	mafiaTeamID = 1;
	vampireTeamID = 2;
	
	Hunter = 1;
	Detective = 2;
	Interrogator = 3;
	Tracker = 4;
	Doctor = 5;
	Observer = 6;
	
	gameTime = 300; 
}

rule: "Setup Time"
if (IsInSetup())
{
	SetMatchTime(10);
}

rule: "Initial Setup"
if (!isInitialized & IsGameInProgress()) 
{
	DisableCompletion();
	DisableScoring();
	DisableRespawning(AllPlayers());
	SetMatchTime(gameTime);
	
	if (NumberOfPlayers() > 1)
	{
		numberOfMafia = RoundToInteger(NumberOfPlayers() / 3.5);
	}
	
	DestroyAllHudText();
	
	// Make random players mafia
	ArraySlice(RandomizedArray(FilteredArray(AllPlayers(), ArrayElement().team == 0)), 0, numberOfMafia).team = mafiaTeamID;
	
	// Choose random event
	event = RandomInteger(0, 3);
	
	// Get an array of all players that were in the game when the game started.
	registeredPlayers = AllPlayers();
	
	isInitialized = true;
}

// Event setup
rule: "Vampire Event Setup"
if (isInitialized)
if (event == 0)
{
	// Choose a random vampire
	initalVampire = RandomValueInArray(AllPlayers());
	initalVampire.team = vampireTeamID;
	
	BigMessage(AllPlayers(), <"warning: corrupt incoming!">);
}

rule: "Choose town roles"
Event.OngoingPlayer
if (isInitialized)
if (team == allyTeamID)
{
	if (role == 0)
		role = RandomInteger(1, 6);
	CreateHudText(EventPlayer(), <"Current objective: Find Allies and Enemies">, 
		null, null, Location.Top, 0, Color.Green);
	objectiveHud = LastTextID();
}

rule: "Choose mafia roles"
Event.OngoingPlayer
if (isInitialized)
if (team == mafiaTeamID)
{
	if (role == 0)
		role = RandomInteger(-4, -1);
	
	CreateHudText(EventPlayer(), <"Current objective: Kill">, 
		null, null, Location.Top, 0, Color.Red);
	objectiveHud = LastTextID();
	
	CreateEffect(
		// Only allow the mafia players to see the effect.
		FilteredArray(AllPlayers(), gameIsOver | (ArrayElement().team == mafiaTeamID)),
		Effect.Sphere,
		Color.Red,
		EyePosition() + Vector(0, 0.25, 0),
		0.25
	);
	
	orbIdentifier = LastCreatedEntity();
	
	CreateHudText(
		// Only allow the mafia players to see the hud text.
		FilteredArray(AllPlayers(), gameIsOver | (ArrayElement().team == mafiaTeamID)),
		HeroIconString(),
		null,
		EventPlayer(),
		Location.Right
	);
	
	teamHud = LastTextID();
}

rule: "Role Setup: Hunter"
Event.OngoingPlayer
if (isInitialized)
if (role == Hunter)
{
	CreateHudText(EventPlayer(), <"Crouch near dead player -> find attacking player">,
		null, null, Location.Top, 0, Color.Green);
	roleHud = LastTextID();
}

rule: "Role Setup: Detective"
Event.OngoingPlayer
if (isInitialized)
if (role == Detective)
{
	CreateHudText(EventPlayer(), <"Crouch near dead player -> find team">,
		null, null, Location.Top, 0, Color.Green);
	roleHud = LastTextID();
}

rule: "Role Setup: Interrogator"
Event.OngoingPlayer
if (isInitialized)
if (role == Interrogator)
{
	CreateHudText(EventPlayer(), <"Crouch near player -> find team (<0> times = <1> team)", 3, true>,
		null, null, Location.Top, 0, Color.Green);
	roleHud = LastTextID();
}

rule: "Role Setup: Tracker"
Event.OngoingPlayer
if (isInitialized)
if (role == Tracker)
{
	CreateHudText(EventPlayer(), <"Ability near player -> Connect alert">,
		null, null, Location.Top, 0, Color.Green);
	roleHud = LastTextID();
}

rule: "Role Setup: Doctor"
Event.OngoingPlayer
if (isInitialized)
if (role == Doctor)
{
	CreateHudText(EventPlayer(), <"Crouch near dead player -> resurrect player">,
		null, null, Location.Top, 0, Color.Green);
	roleHud = LastTextID();
}

rule: "Role Setup: Observer"
Event.OngoingPlayer
if (isInitialized)
if (role == Observer)
{
	CreateHudText(EventPlayer(), <"Ability -> Build in_view, Crouch and ability -> go in_view">,
		null, null, Location.Top, 0, Color.Green);
	roleHud = LastTextID();
}

rule: "Role Setup: Framer"
Event.OngoingPlayer
if (isInitialized)
if (role == Framer)
{
	CreateHudText(EventPlayer(), <"Crouch near player -> corrupt player">,
		null, null, Location.Top, 0, Color.Red);
	roleHud = LastTextID();
}

rule: "Role Setup: Necromancer"
Event.OngoingPlayer
if (isInitialized)
if (role == Necromancer)
{
	CreateHudText(EventPlayer(), <"Crouch near dead player -> rescue? player">,
		null, null, Location.Top, 0, Color.Red);
	roleHud = LastTextID();
}

rule: "Role Setup: Revealer"
Event.OngoingPlayer
if (isInitialized)
if (role == Revealer)
{
	CreateHudText(EventPlayer(), <"Crouch near dead player -> reveal enemy players">,
		null, null, Location.Top, 0, Color.Red);
	roleHud = LastTextID();
}

rule: "Slaughter innocent new players"
Event.OngoingPlayer
if (isInitialized)
if (!ArrayContains(registeredPlayers, EventPlayer()))
{
	Kill();
	CreateHudText(EventPlayer(), <"Waiting form next game">);
}

rule: "Player Setup"
Event.OngoingPlayer
if (isInitialized)
if (HasSpawned())
{
	DisableRespawning();
}

rule: "Town Win"
if (false)
if (isInitialized)
if (NumberOfPlayers() > 1)
// Allies win when either...
if ((MatchTime() == 0) // ...the time remaining is 0...
	|  // ...or...
	// The number of players that are not allies and are dead equals 0.
	(CountOf(FilteredArray(
			AllPlayers(), 
			IsAlive(ArrayElement()) & EntityExists(ArrayElement()) & (ArrayElement().team != allyTeamID)
		)) == 0)
	)
{
	gameIsOver = true;
	SetSlowMotion(50);
	BigMessage(AllPlayers(), <"Allies Win!">);
	Wait(3);
	DeclarePlayerVictory(RandomValueInArray(FilteredArray(AllPlayers(), ArrayElement().team == allyTeamID)));
}

rule: "Mafia Win"
if (false)
if (isInitialized)
if (NumberOfPlayers() > 1)

if (CountOf(FilteredArray(
		AllPlayers(), 
		IsAlive(ArrayElement()) & EntityExists(ArrayElement()) & (ArrayElement().team != mafiaTeamID)
	)) == 0)
{
	gameIsOver = true;
	SetSlowMotion(50);
	BigMessage(AllPlayers(), <"Attacking players Win!">);
	Wait(3);
	DeclarePlayerVictory(RandomValueInArray(FilteredArray(AllPlayers(), ArrayElement().team == mafiaTeamID)));
}

rule: "Vampire Win"
if (false)
if (isInitialized)
if (NumberOfPlayers() > 1)

if (CountOf(FilteredArray(
		AllPlayers(), 
		IsAlive(ArrayElement()) & EntityExists(ArrayElement()) & (ArrayElement().team != vampireTeamID)
	)) == 0)
{
	gameIsOver = true;
	SetSlowMotion(50);
	BigMessage(AllPlayers(), <"Corrupt Win!">);
	Wait(3);
	DeclarePlayerVictory(RandomValueInArray(FilteredArray(AllPlayers(), ArrayElement().team == vampireTeamID)));
}


rule: "Death"
Event.OnDeath
if (isInitialized) 
{
	if (Attacker().team != vampireTeamID)
	{
		// Create the sphere
		CreateEffect(AllPlayers(), Effect.Sphere, Color.White, EventPlayer(), 0.350, EffectRev.None);
		deathSphere = LastTextID();
		
		// Create the hud text
		CreateInWorldText(
			FilteredArray(AllPlayers(), DistanceBetween(ArrayElement(), EventPlayer()) < 7),
			<"<0>: dead", EventPlayer()>,
			PositionOf(EventPlayer()) + Vector(0, 0.15, 0),
			2,
			Clipping.ClipAgainstSurfaces,
			InworldTextRev.VisibleToPositionAndString
		);
		deathText = LastTextID();
		
		killer = Attacker();
		killersStep = CountOf(Attacker().steps);
		Attacker().killCount += 1;
		
		if (Attacker().team == team)
		{
			SmallMessage(Attacker(), <"Team Kill!">);
		}
	}
	else
	{
		// If the player was killed by a vampire, revive them and make them a vampire.
		team = vampireTeamID;
		Resurrect();
	}
}

rule: "Player Interact Start"
Event.OngoingPlayer
if (canInteract)
if (interactTarget == null)
if (IsButtonHeld(EventPlayer(), Button.Crouch))
if (abilityCharges == -1 | abilityCharges > 0)
if (IsAlive())
{
	interactTarget = PlayerClosestToReticle(EventPlayer());
	
	if ((targetState == 0 | (targetState == 1 & IsAlive(interactTarget)) | (targetState == 2 & IsDead(interactTarget)))
		& DistanceBetween(EventPlayer(), interactTarget) < 7)
	{
		// Create the interact hud
		CreateHudText(EventPlayer(), <"Current Target: <0> (<1>%)", interactTarget, abilityProgress>);
		interactHUD = LastTextID();
		
		// Create the effect
		CreateEffect(EventPlayer(), Effect.Ring, Color.Blue, interactTarget, 1, EffectRev.PositionAndRadius);
		interactEffect = LastCreatedEntity();
	}
	else
	{
		interactTarget = null;
		Wait(0.250);
		LoopIfConditionIsTrue();
		Abort();
	}
}

rule: "Player Interact Update"
Event.OngoingPlayer
if (canInteract)
if (interactTarget != null)
{
	abilityProgress += (100 / interactTime) * 0.100;
	Wait(0.100);
	LoopIfConditionIsTrue();
}

rule: "Player Interact Stop"
Event.OngoingPlayer
if (canInteract)
if (interactTarget != null)
if (!IsButtonHeld(EventPlayer(), Button.Crouch)
	| IsButtonHeld(EventPlayer(), Button.Jump)
	| IsDead()
	| abilityProgress >= 100
	| DistanceBetween(EventPlayer(), interactTarget) > 8)
{
	DestroyHudText(interactHUD);
	DestroyEffect(interactEffect);
	PlayEffect(EventPlayer(), PlayEffect.RingExplosion, Color.Blue, PositionOf(EventPlayer()), 2);
	if (abilityProgress != 100)
	{
		interactTarget = null;
		abilityProgress = 0;
	}
}

rule: "Hunter Ability"
Event.OngoingPlayer
if (role == Hunter)
if (abilityProgress >= 100)
{
	hunterVictim = interactTarget;
	
	if (!hunterEffectsRegistered)
	{
		hunterEffectsRegistered = true;
		hunterStep = hunterVictim.killersStep;
		hunterLocation = hunterVictim.killer.steps[hunterStep];
		
		CreateHudText(EventPlayer(), <"finding <0> attack (<1> left)", hunterVictim, CountOf(hunterVictim.killer.steps) - hunterStep>);
		hunterHud = LastTextID();
		
		CreateEffect(EventPlayer(), Effect.Orb, Color.Red, hunterLocation);
		hunterEffect = LastCreatedEntity();
		
		CreateIcon(EventPlayer(), hunterLocation, Icon.ArrowDown, IconRev.VisibleToAndPosition, Color.Red, true);
		hunterIcon = LastCreatedEntity();
	}
	
	interactTarget = null;
	abilityProgress = 0;
}

/*
The step tracker tracks the player's position.
This is used by the hunter to track a player's killer.
Only do it every 10 meters.
*/
rule: "Step Tracker"
Event.OngoingPlayer
if (isInitialized)
if (killCount > 0)
if (TotalTimeElapsed() % 3 < 1)
if (CountOf(steps) == 0 | DistanceBetween(LastOf(steps), EventPlayer()) >= 10)
{
	steps = Append(steps, PositionOf());
}

rule: "Hunter Visual Tracking Indent"
Event.OngoingPlayer
if (role == Hunter)
if (DistanceBetween(EventPlayer(), hunterLocation) < 3)
{
	if (hunterStep < CountOf(hunterVictim.killer.steps) - 1)
	{
		hunterStep += 1;
		hunterLocation = hunterVictim.killer.steps[hunterStep];
	}
	else
	{
		hunterLocation = PositionOf(hunterVictim.killer);
	}
	PlayEffect(EventPlayer(), PlayEffect.BuffExplosionSound, Color.White, EventPlayer(), 50);
	SetMoveSpeed(EventPlayer(), 150);
	hunterSpeedBoost = TotalTimeElapsed() + 5;
	SmallMessage(EventPlayer(), <"Fast chase power-up!">);
	Wait(0.25);
	LoopIfConditionIsTrue();
}

rule: "Hunter Speed Reset"
Event.OngoingPlayer
if (role == Hunter)
if (TotalTimeElapsed() > hunterSpeedBoost & hunterSpeedBoost != 0)
{
	SetMoveSpeed(EventPlayer(), 100);
}